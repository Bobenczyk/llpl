/// this is a comment
/// <- is used because // operator is already used as floor division


/// calling functions:
/// ( name    params  )
    ( print   a  b  c )
/// prints out: "a b c"


/// using operators:
/// [ params    operator ]
(print
    [ 1  2  3       +    ] )
/// prints out: "6" (1+2+3 (I think you know why 6))


/// variables:

(set a 2)
/// a = 2

(get a)

(pop) /// pops 1 value from stack (you can also do provide number)

/// ONE NOTE:
///     function "set" in future will be used for setting variables locally
///     but for setting vars globally "setg" will be used


(print (concat [

            /// This wouldn't be some another random lisp copy without lists
            /// lists can be crated in 2 ways:
(concat             [ blah blah blah ]          (get SPACE) )     /// with square brackets (why are you reading this you can see for yourself)
(concat             ( list yes sir )            (get SPACE) )     /// and a classical lisp clone approach


] (get NEWLINE) ))         /// "NEWLINE" and "SPACE" vars speak for themself
                           /// but BIG NOTE: they will be only until I am not lazy and implement strings YESSIRRRrr :\/
                           /// instead of writing this


/// blocks:
/// NOTE: blocks work but still there's only one function (as for now) implementing some usebilyty
/// it's "do" which accepts "infinite" paramiers
/// (of any type but will trash any value other then of type block. goes throu provided blocks and evals them synchronously)


/// pseudo functions: (there will be function "func" creating values of type function)

/// pseudo func creation
(set v3_add {
    (set x2 [ (get x0) (get x1) + ])
    (set y2 [ (get y0) (get y1) + ])
    (set z2 [ (get z0) (get z1) + ])
})


/// setting params
(set x0 (rand -10 10)) (set y0 (rand -10 10)) (set z0 (rand -10 10))
(set x1 (rand -10 10)) (set y1 (rand -10 10)) (set z1 (rand -10 10))

/// calling
(do
    (get
        v3_add
    )
)


/// print for debug
(print)
(print
    (concat [
        (concat (list
            (concat (list (get x0) ,))
            (concat (list (get y0) ,))
            (get z0)
            +
        ) (get SPACE))
        (concat (list
            (concat (list (get x1) ,))
            (concat (list (get y1) ,))
            (get z1)
            =
        ) (get SPACE))
        (concat [
            (concat (list (get x2) ,))
            (concat (list (get y2) ,))
            (get z2)
        ] (get SPACE))
    ] (get NEWLINE))
)
(print)


/// ure smart if u understood me
print(concat(list:thumbsup:))) /// turning in to a list to concat without spaces